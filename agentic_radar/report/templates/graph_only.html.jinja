<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Agentic Workflow Visualization - {{project_name}}</title>
<script>
{% include 'assets/force-graph.js' %}
</script>
<script language="javascript" type="text/javascript">
const __INLINE_DATA = {{graph}};
</script>
<style>
body {
    margin: 0;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background-color: #f5f5f5;
}

.header {
    text-align: center;
    margin-bottom: 20px;
}

.header h1 {
    margin: 0;
    color: #333;
    font-size: 24px;
    font-weight: 300;
}

.header p {
    margin: 5px 0 0 0;
    color: #666;
    font-size: 14px;
}

#graph {
    width: 100vw;
    height: 80vh;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: white;
    margin: 0 -20px;
}

.controls {
    position: absolute;
    top: 80px;
    right: 30px;
    background: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 10px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    font-size: 12px;
    color: #666;
}
</style>
</head>
<body>

<div class="header">
    <h1>{{project_name}} - Workflow Graph</h1>
    <p>{{framework}} | Generated {{timestamp}} | Agentic Radar v{{scanner_version}}</p>
</div>

<div class="controls">
    <div>üñ±Ô∏è Drag to pan</div>
    <div>üîç Scroll to zoom</div>
    <div>üëÜ Click nodes for details</div>
</div>

<div id="graph"></div>

<script>
// Initialize the force graph
const graph = ForceGraph()
    (document.getElementById('graph'))
    .graphData(__INLINE_DATA)
    .nodeAutoColorBy('type')
    .nodeCanvasObject((node, ctx, globalScale) => {
        const label = node.label || node.name || node.id;
        const size = 20/globalScale;
        
        // Draw node icon if available
        if (node.image) {
            // Cache image objects
            if (!node._img) {
                node._img = new Image();
                node._img.src = node.image;
            }
            
            if (node._img.complete) {
                // Draw icon
                ctx.drawImage(node._img, node.x - size/2, node.y - size/2, size, size);
            }
        } else {
            // Fallback to colored circle if no image
            ctx.beginPath();
            ctx.arc(node.x, node.y, size/2, 0, 2 * Math.PI, false);
            ctx.fillStyle = node.color || '#999';
            ctx.fill();
        }
        
        // Draw label below the icon
        const fontSize = 10/globalScale;
        ctx.font = `${fontSize}px Sans-Serif`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'top';
        ctx.fillStyle = '#333';
        ctx.fillText(label, node.x, node.y + size/2 + 2/globalScale);
    })
    .onNodeClick(node => {
        // Display node information
        alert(`Node: ${node.name || node.id}\nType: ${node.type || 'unknown'}\nDescription: ${node.description || 'No description available'}`);
    })
    .linkDirectionalArrowLength(3)
    .linkDirectionalArrowRelPos(1)
    .linkCurvature(0.25);

// Auto-fit graph to screen
setTimeout(() => {
    graph.zoomToFit(400, 50);
}, 100);
</script>

</body>
</html>