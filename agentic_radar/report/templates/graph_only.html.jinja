<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>SPLX Agentic Radar - Graph Visualization</title>
<script>
{% include 'assets/force-graph.js' %}
</script>
<script language="javascript" type="text/javascript">
const __INLINE_DATA = {{graph}};
</script>
<style>
body {
    margin: 0;
    padding: 0;
    font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background-color: white;
}

.header {
    background: linear-gradient(135deg, #2AF5D8 0%, #2A90F4 50%, #9281FF 100%);
    padding: 20px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.header h1 {
    margin: 0;
    color: white;
    font-size: 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
}

.header p {
    margin: 8px 0 0 0;
    color: rgba(255,255,255,0.9);
    font-size: 12px;
}

#graph {
    width: calc(100vw - 40px);
    height: calc(100vh - 140px);
    border: 0.5px solid #D4D4D4;
    background-color: white;
    margin: 20px;
    position: relative;
}

.controls {
    position: absolute;
    top: 100px;
    right: 40px;
    background: white;
    border: 0.5px solid #D4D4D4;
    border-radius: 4px;
    padding: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    font-size: 10px;
    color: #777777;
    z-index: 1000;
}

.logo {
    width: 32px;
    height: 32px;
    fill: white;
}
</style>
</head>
<body>

<div class="header">
    <h1>
        <svg class="logo" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="40" height="40" rx="20" fill="white" fill-opacity="0.2"/>
            <path d="M11 20C11 21.1819 11.2328 22.3522 11.6851 23.4442C12.1374 24.5361 12.8003 25.5282 13.636 26.364C14.4718 27.1997 15.4639 27.8626 16.5558 28.3149C17.6478 28.7672 18.8181 29 20 29M11 20C11 18.8181 11.2328 17.6478 11.6851 16.5558C12.1374 15.4639 12.8003 14.4718 13.636 13.636C14.4718 12.8003 15.4639 12.1374 16.5558 11.6851C17.6478 11.2328 18.8181 11 20 11M11 20H15M20 29C21.1819 29 22.3522 28.7672 23.4442 28.3149C24.5361 27.8626 25.5282 27.1997 26.364 26.364C27.1997 25.5282 27.8626 24.5361 28.3149 23.4442C28.7672 22.3522 29 21.1819 29 20M20 29V26M29 20C29 18.8181 28.7672 17.6478 28.3149 16.5558C27.8626 15.4639 27.1997 14.4718 26.364 13.636C25.5282 12.8003 24.5361 12.1374 23.4442 11.6851C22.3522 11.2328 21.1819 11 20 11M29 20H26M20 11V15M20 20V20.01" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        SPLX Agentic Radar - Workflow Graph
    </h1>
    <p>{{project_name}} | {{framework}} | Generated {{timestamp}}</p>
</div>

<div class="controls">
    <div>üñ±Ô∏è Drag to pan</div>
    <div>üîç Scroll to zoom</div>
    <div>üëÜ Click nodes for details</div>
</div>

<div id="graph"></div>

<script>
// Initialize the force graph
const graph = ForceGraph()
    (document.getElementById('graph'))
    .graphData(__INLINE_DATA)
    .nodeAutoColorBy('type')
    .nodeCanvasObject((node, ctx, globalScale) => {
        const label = node.label || node.name || node.id;
        const size = 20/globalScale;
        
        // Draw node icon if available
        if (node.image) {
            // Cache image objects
            if (!node._img) {
                node._img = new Image();
                node._img.src = node.image;
            }
            
            if (node._img.complete) {
                // Draw icon
                ctx.drawImage(node._img, node.x - size/2, node.y - size/2, size, size);
            }
        } else {
            // Fallback to colored circle if no image
            ctx.beginPath();
            ctx.arc(node.x, node.y, size/2, 0, 2 * Math.PI, false);
            ctx.fillStyle = node.color || '#999';
            ctx.fill();
        }
        
        // Draw label below the icon
        const fontSize = 10/globalScale;
        ctx.font = `${fontSize}px Sans-Serif`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'top';
        ctx.fillStyle = '#333';
        ctx.fillText(label, node.x, node.y + size/2 + 2/globalScale);
    })
    .onNodeClick(node => {
        // Create a more informative display
        const info = [];
        info.push(`Node: ${node.name || node.id || 'Unknown'}`);
        info.push(`Type: ${node.type || node.node_class || 'agent'}`);
        if (node.description) info.push(`Description: ${node.description}`);
        if (node.role) info.push(`Role: ${node.role}`);
        if (node.tools && node.tools.length > 0) {
            info.push(`Tools: ${node.tools.length}`);
        }
        alert(info.join('\n'));
    })
    .linkDirectionalArrowLength(3)
    .linkDirectionalArrowRelPos(1)
    .linkCurvature(0.25);

// Auto-fit graph to screen
setTimeout(() => {
    graph.zoomToFit(400, 50);
}, 100);
</script>

</body>
</html>