[{"type":"tool","match":"category","value":"llm","vulnerabilities":[{"name":"Prompt Injection","description":"An attacker can craft malicious prompts that cause the LLM to ignore original instructions or produce unintended actions. This could lead the model to divulge secrets or perform unauthorized operations by hijacking its instruction context.","security_framework_mapping":{"OWASP LLM Top 10":"LLM01 - Prompt Injection","OWASP Agentic":"T6 - Intent Breaking & Goal Manipulation"},"remediation":"• Implement input validation and sanitization\n• Use structured prompting techniques to enforce strict context adherence\n• Define system prompts with explicit boundaries and restrict user access to modify them"},{"name":"Sensitive Information Disclosure","description":"LLMs inadvertently expose sensitive data such as PII, credentials, or proprietary information via outputs or reverse-engineering system prompts.","security_framework_mapping":{"OWASP LLM Top 10":"LLM02 - Sensitive Information Disclosure\nLLM07 - System Prompt Leakage"},"remediation":"• Implement data sanitization to prevent user data from entering the model\n• Avoid Reliance on System Prompts for Strict Behavior Control\n• Implement Guardrails"}]},{"type":"tool","match":"category","value":"web_search","vulnerabilities":[{"name":"Indirect Prompt Injection","description":"Attackers can poison search results (SEO poisoning) or craft pages so that their snippets contain malicious instructions. For instance, hidden text in a webpage that ranks in results could manipulate the agent’s summary or follow-up actions.","security_framework_mapping":{"OWASP LLM Top 10":"LLM01 - Prompt Injection","OWASP Agentic":"T6 - Intent Breaking & Goal Manipulation"},"remediation":"• Enable URL whitelisting\n• Implement guardrails filtering for prompt injection"},{"name":"Misinformation","description":"The agent might unknowingly incorporate malicious snippets into its reasoning, leading to harmful output (e.g., biased or false information, or even code if the snippet is crafted as such).","security_framework_mapping":{"OWASP LLM Top 10":"LLM09 - Misinformation","OWASP Agentic":"T1 - Memory Poisoning"},"remediation":"• Implement guardrails to filter out malicious snippets\n• Implement data sanitization to prevent user data from entering the tool"}]},{"type":"tool","match":"category","value":"code_interpreter","vulnerabilities":[{"name":"Arbitrary Code Execution (ACE)","description":"Tool lets the agent execute Python code, which can be exploited to run unauthorized commands. If an attacker influences the prompt (directly or via the LLM), they could inject harmful Python code (e.g. calling OS commands via os.system or using exec). This effectively gives remote code execution on the host. Without sandboxing, the agent could read/write files or escalate privileges on the system.","security_framework_mapping":{"CVEs":"CVE-2023-36258\nCVE-2023-44467","OWASP LLM Top 10":"LLM05 - Improper Output Handling\nLLM06 - Excessive Agency","OWASP Agentic":"T11 - Unexpected RCE and Code Attacks"},"remediation":"• Restrict AI code generation permissions\n• Implement sandbox environment where code execution is limited\n• Implement execution control policies that flag AI generated code with elevated privileges for manual review"}]},{"type":"tool","match":"name","value":"WebBaseLoader","vulnerabilities":[{"name":"Unrestricted External Access leading to SSRF","description":"The tool can access external resources without proper validation, which can be exploited to perform Server-Side Request Forgery (SSRF) attacks. An attacker can manipulate the tool to fetch internal resources, bypassing security controls and potentially accessing sensitive data or services.","security_framework_mapping":{"CVEs":"CVE-2023-32786\nCVE-2024-3095\nCVE-2024-4084\nCVE-2023-46229","OWASP LLM Top 10":"LLM06 - Excessive Agency","OWASP Agentic":"T2 - Tool Misuse"},"remediation":"• Enable URL whitelisting\n• Implement content sanitization"},{"name":"Data Exfiltration","description":"The tool can be manipulated to exfiltrate data from the host system or network. An attacker can craft malicious prompts that cause the tool to access and transmit sensitive information to an external server, leading to data leakage. Attack works by encoding the sensitive data into the URL which then gets fetched by the tool.","security_framework_mapping":{"OWASP LLM Top 10":"LLM02 - Sensitive Information Disclosure","OWASP Agentic":"T6 - Intent Breaking & Goal Manipulation"},"remediation":"• Implement data sanitization to prevent user data from entering the tool\n• Implement guardrails to restrict data access and transmission"}]},{"type":"tool","match":"category","value":"document_loader","vulnerabilities":[{"name":"Indirect Prompt Injection","description":"Any malicious webpage could include hidden prompts that the agent will read, injecting commands into the agent’s context (an indirect prompt injection attack).","security_framework_mapping":{"OWASP LLM Top 10":"LLM01 - Prompt Injection","OWASP Agentic":"T6 - Intent Breaking & Goal Manipulation"},"remediation":"• Enable URL whitelisting\n• Implement guardrails filtering for prompt injection"}]},{"type":"tool","match":"name","value":"GraphRetriever","vulnerabilities":[{"name":"RAG Poisoning","description":"Attackers can manipulate the retrieval process by injecting false, misleading, or malicious data into the knowledge base or vector store. This causes the LLM to return incorrect, harmful, biased responses or leak sensitive information.","security_framework_mapping":{"OWASP LLM Top 10":"LLM08 - Vector and Embedding Weaknesses","OWASP Agentic":"T1 - Memory Poisoning"},"remediation":"• Implement access control and data validation\n• Implement prompt injection filtering\n• Implement guardrails to restrict data access and transmission"}]},{"type":"tool","match":"name","value":"PineconeHybridSearchRetriever","vulnerabilities":[{"name":"RAG Poisoning","description":"Attackers can manipulate the retrieval process by injecting false, misleading, or malicious data into the knowledge base or vector store. This causes the LLM to return incorrect, harmful, biased responses or leak sensitive information.","security_framework_mapping":{"OWASP LLM Top 10":"LLM08 - Vector and Embedding Weaknesses","OWASP Agentic":"T1 - Memory Poisoning"},"remediation":"• Implement access control and data validation\n• Implement prompt injection filtering\n• Implement guardrails to restrict data access and transmission"}]},{"type":"tool","match":"name","value":"VectorStoreRetriever","vulnerabilities":[{"name":"RAG Poisoning","description":"Attackers can manipulate the retrieval process by injecting false, misleading, or malicious data into the knowledge base or vector store. This causes the LLM to return incorrect, harmful, biased responses or leak sensitive information.","security_framework_mapping":{"OWASP LLM Top 10":"LLM08 - Vector and Embedding Weaknesses","OWASP Agentic":"T1 - Memory Poisoning"},"remediation":"• Implement access control and data validation\n• Implement prompt injection filtering\n• Implement guardrails to restrict data access and transmission"}]},{"type":"tool","match":"name","value":"Kinetica","vulnerabilities":[{"name":"RAG Poisoning","description":"Attackers can manipulate the retrieval process by injecting false, misleading, or malicious data into the knowledge base or vector store. This causes the LLM to return incorrect, harmful, biased responses or leak sensitive information.","security_framework_mapping":{"OWASP LLM Top 10":"LLM08 - Vector and Embedding Weaknesses","OWASP Agentic":"T1 - Memory Poisoning"},"remediation":"• Implement access control and data validation\n• Implement prompt injection filtering\n• Implement guardrails to restrict data access and transmission"}]},{"type":"tool","match":"name","value":"QdrantSparseVectorRetriever","vulnerabilities":[{"name":"RAG Poisoning","description":"Attackers can manipulate the retrieval process by injecting false, misleading, or malicious data into the knowledge base or vector store. This causes the LLM to return incorrect, harmful, biased responses or leak sensitive information.","security_framework_mapping":{"OWASP LLM Top 10":"LLM08 - Vector and Embedding Weaknesses","OWASP Agentic":"T1 - Memory Poisoning"},"remediation":"• Implement access control and data validation\n• Implement prompt injection filtering\n• Implement guardrails to restrict data access and transmission"}]},{"type":"tool","match":"name","value":"VespaRetriever","vulnerabilities":[{"name":"RAG Poisoning","description":"Attackers can manipulate the retrieval process by injecting false, misleading, or malicious data into the knowledge base or vector store. This causes the LLM to return incorrect, harmful, biased responses or leak sensitive information.","security_framework_mapping":{"OWASP LLM Top 10":"LLM08 - Vector and Embedding Weaknesses","OWASP Agentic":"T1 - Memory Poisoning"},"remediation":"• Implement access control and data validation\n• Implement prompt injection filtering\n• Implement guardrails to restrict data access and transmission"}]}]